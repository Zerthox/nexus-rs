searchState.loadedDescShard("nexus", 0, "Bindings for Raidcore Nexus addons.\nNexus addon API (version 6).\nA revertible action.\nFields supported by the <code>export</code> macro.\nAdds a new icon to the quick access with the given texture …\nAdds a new ImGui callback fired when right-clicking the …\nAdds a font from disk and sends updates to the callback.\nAdds a font from memory and sends updates to the callback.\nAdds a font from an embedded resource and sends updates to …\nAddon information.\nReturns the Nexus <code>AddonApi</code> instance.\nAlert notifications displayed to the user.\nMinHook create.\nData link for sharing resources.\nData Link API.\nRemoves a registered render callback.\nRemoves a registered WNDPROC callback.\nRemoves a registered keybind.\nDeregisters a window name to listen to on escape.\nMinHook disable.\nMinHook enable.\nEvent system.\nEvent API.\nMacro to wrap an event callback.\nMacro to subscribe to an event with a wrapped callback.\nCreates addon exports for Raidcore Nexus.\nInformation about the addon.\nFont loading.\nFont API.\nMacro to wrap a font receive callback.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGame keybinds API.\nGame keybinds.\nReturns a pointer to the requested resource of <code>null</code> if it …\nReturns a pointer to the <code>Texture</code> or <code>null</code> if it does not …\nRequests a font to be sent to the given callback/receiver.\nReturns a path to <code>&quot;\\addons\\{name}&quot;</code>.\nReturns the path to the common addon folder.\nReturns the path to the game directory.\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nImGui rendering via <code>imgui-rs</code>.\nHooking via MinHook.\nImGui context.\nImGui free function.\nImGui malloc function.\nInput keybinds API.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns the revertible into the inner callable.\nTrigger a keybind programmatically.\nSends the keys of a given bind and then releases them …\nReturns if a given game bind is set.\nAddon keybinds.\nMacro to wrap a keybind handler callback.\nLeaves the action to not be reverted.\nLoad function of the addon.\nCreates a texture from the file and passes it to the …\nCreates a texture from the memory and passes it to the …\nCreates a texture from the resource and passes it to the …\nCreates a texture from the URL and passes it to the …\nLocalization of strings.\nLocalization API.\nLogging.\nLogs a message to the log window and log file.\nFilter for the log. Same syntax as env_logger.\nMinHook API.\nName of the addon. Defaults to <code>CARGO_PKG_NAME</code>.\nCreates a new revertible action.\nSends a notification icon to the given shortcut.\nAdds a new action to be perform on unload.\nPaths API.\nPaths.\nTPresses the keys of a given bind.\nPresses the keys of a given bind.\nWhat platform the addon is hosted on.\nQuick access creation.\nQuick Access API.\nRaises an event to all subscribing addons.\nRaises an event without payload to all subscribing addons.\nRaises an event without payload for a specific subscribing …\nRaises an event for a specific subscribing addon.\nRegisters a new render callback.\nRegisters a new WNDPROC callback.\nRegisters a window name to get its bool toggled when …\nRegisters a new keybind handler for a given named keybind.\nRegisters a new keybind handler for a given named keybind.\nReleases the keypress of a given bind.\nReleases a callback/receiver from a specific font.\nReleases the keypress of a given bind.\nMinHook remove.\nRemoves a shortcut with the given identifier from quick …\nRemoves a registered context menu from the quick access …\nMacro to wrap an ImGui render callback.\nRendering API.\nDownloads the addon available at remote without checking …\nResizes a font and sends updates to the registered …\nReverts the action.\nSubmits the revertible to be reverted on unload.\nSends a text alert to the user visible for a short amount …\nSends a WNDPROC directly to the game, bypassing other …\nSet a translated string at runtime.\nAllocates a shared resource of the given size and returns …\nRaidcore addon id or random unique negative integer, if …\nRegisters a new event callback.\nDirectX swap chain.\nTexture loading.\nTexture Api.\nMacro to wrap a texture receive callback.\nTranslates the identifier into the current active language.\nTranslates the identifier into the given language. Returns …\nReturns an <code>imgui::Ui</code> for rendering a frame.\nUi API.\nUnload function of the addon.\nRemoves a registered event callback.\nLink to the update resource.\nUpdate management.\nAddon API version 2.\nAddon API version 3.\nAddon API version 4.\nAddon API version 4.\nWindows WNDPROC.\nWNDPROC API.\nAddon definition.\nAddon flags.\nAddon version.\nDirect file link.\nPrevents unloading at runtime. Will require a restart if …\nGitHub releases.\nHooking functions or doing anything else that is volatile …\nManual updating.\nDoes not support auto updating.\nPrevents loading the addon later than the initial …\nRaidcore via API.\nAddon update provider.\nAn iterator over the variants of UpdateProvider\nGet a flags value with all known bits set.\nDetermines which <code>AddonApi</code> struct revision the Loader will …\nAuthor of the addon.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nShort addon description.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nInformation about the addon\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLoad function of the addon.\nName of the addon.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhat platform is the the addon hosted on.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nRaidcore addon id or random unique negative integer, if …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnload function of the addon.\nLink to the update resource.\nVersion of the addon.\nSends an alert that is visible to the user for a short …\nMumble link identifier.\nMumbleLink shared memory.\nNexus link identifier.\nNexus link data.\nPosition of the player in map coordinate system.\nPosition of the camera.\nSee <code>Context</code>.\nLength of the following context.\nGame description.\nReturns the name as <code>OsString</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the shared <code>MumbleLink</code> pointer as <code>MumblePtr</code>.\nReturns the shared <code>MumbleLink</code> pointer.\nReturns the shared <code>NexusLink</code> pointer.\nReturns a pointer to a shared resource.\nIdentity information as JSON.\nReturns the name as <code>OsString</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMumble link bindings.\nGame name.\nReturns the name as <code>OsString</code>.\nParses the current identity JSON contents.\nReads the shared <code>MumbleLink</code> data.\nReads the shared <code>NexusLink</code> data.\nReads a shared resource.\nCreates a new shared resource.\nUI tick.\nUI version.\nMumbleLink context specific to Guild Wars 2.\nMumbleLink is disabled.\nA possible error occurring during <code>MumbleLink</code> creation.\nInformation about player identity.\nMumbleLink shared memory.\nMount.\nMumbleLink shared memory.\nA pointer to <code>LinkedMem</code> with utility.\nMumbleLink name has interior nul byte.\nPosition structure.\nCharacter profession.\nCharacter race.\nUser UI scaling.\nCurrent UI state.\nGet a flags value with all known bits set.\nReturns a <code>NonNull</code> pointer to the <code>LinkedMem</code>.\nReturns a raw pointer to the <code>LinkedMem</code>.\nReturns a reference to the <code>LinkedMem</code>.\nPosition of the player in map coordinate system.\nPosition of the player in map coordinate system.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCurrent build id.\nPosition of the camera.\nPosition of the camera.\nWhether the character has a commander tag active.\nCompass height in pixels.\nCompass rotation in radians.\nCompass width in pixels.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nSee <code>Context</code>.\nSee <code>Context</code>.\nLength of the following context.\nLength of the following context.\nGame description.\nGame description.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nVertical field of view.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nUnit vector pointing out of the eyes, aka the “At”…\nReturns the shared <code>MumbleLink</code> pointer as <code>MumblePtr</code>.\nReturns the shared <code>MumbleLink</code> pointer.\nIdentity information as JSON.\nIdentity information as JSON.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCurrent instance id.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMap center x in continent coordinates.\nMap center y in continent coordinates.\nKnown map ids.\nId of the current map.\nCurrent map id.\nMap scale.\nKnown map types as constants.\nType of the current map.\nCurrently used mount.\nCharacter name.\nGame name.\nGame name.\nCreates a new access point to the <code>LinkedMem</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nParses the current player identity JSON contents.\nPlayer position x in continent coordinates.\nPlayer position y in continent coordinates.\nPosition in space.\nProcess id.\nCharacter profession.\nCharacter race.\nReads the entire current <code>LinkedMem</code> contents.\nReads the current player avatar <code>Position</code>.\nReads the current build id.\nReads the current camera <code>Position</code>.\nReads the current compass dimensions in pixels.\nReads the current compass height in pixels.\nReads the current compass rotation in radians.\nReads the current compass width in pixels.\nReads the current <code>Context</code>.\nReads the game description.\nReads the game description as <code>OsString</code>.\nReads the current player identity.\nReads the current player identity as <code>OsString</code>.\nReads the current instance id.\nReads the current map center in continent coordinates.\nReads the current map center x in continent coordinates.\nReads the current map center y in continent coordinates.\nReads the current map id.\nReads the map scale.\nReads the current map type.\nReads the currently used mount.\nReads the shared <code>MumbleLink</code> data.\nReads the current game name.\nReads the current game name as <code>OsString</code>.\nReads the current player position x in continent …\nReads the current player position x in continent …\nReads the current player position y in continent …\nReads the process id.\nReads the current server address.\nReads the current shard id.\nReads the current UI state.\nReads the current <code>ui_tick</code>.\nReads the current <code>ui_version</code>.\nThe intersection of a source flags value with the …\nAddress of the server.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCurrent shard id.\nEquipped 3rd specialization.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTeam color.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nUnit vector pointing out of the top of the head, aka the …\nCurrent user UI scaling.\nCurrent UI state bitflags.\nUI tick.\nUI tick.\nUI version.\nUI version.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nShard id from [<code>Context</code>].\nActivities.\nFractals of the Mists.\nPlayer Hubs.\nStructured PvP.\nRaids.\nStrike Missions.\nWorld versus World.\nAspect Arena\nBell Choir Ensemble\nClock Tower\nCrab Toss\nDragon Ball\nKeg Brawl\nLunatic Inquisition\nReaper’s Rumble\nSanctum Sprint\nSnowball Mayhem\nSouthsun Survival\nToypocalypse\nWinter Wonderland\nAetherblade Fractal.\nAquatic Ruins Fractal.\nCaptain Mai Trin Boss Fractal.\nChaos Fractal.\nCliffside Fractal.\nDeepstone Fractal.\nLonely Tower Fractal.\nMistlock Observatory (Fractal lobby).\nMolten Boss Fractal.\nMolten Furnace Fractal.\nNightmare Fractal.\nShattered Observatory Fractal.\nSilent Surf Fractal.\nSiren’s Reef Fractal.\nSnowblind Fractal.\nSolid Ocean Fractal.\nSunqua Peak Fractal.\nSwampland Fractal.\nThaumanova Reactor Fractal.\nTwiilight Oasis Fractal.\nUncategorized Fractal.\nUnderground Facility Fractal.\nUrban Battleground Fractal.\nVolcanic Fractal.\nLion’s Arch Aerodrome (Raid lobby).\nArborstone (EOD).\nEye of the North (IBS).\nLions’s Arch.\nMistlock Observatory (Fractal lobby).\nMistlock Sanctuary.\nPvP Lobby.\nWizard’s Tower (SOTO).\nAsura Arena.\nAuric Span.\nBattle of Champion’s Dusk.\nBattle of Khylo.\nCourtyard (first map id).\nCourtyard (alternative map id).\nDjinn’s Dominion.\nEternal Coliseum.\nForest of Niflhel.\nHall of the Mists.\nLegacy of the Foefire.\nPvP Lobby.\nRevenge of the Capricorn.\nSkyhammer.\nSpirit Watch.\nTemple of the Silent Storm.\nLion’s Arch Aerodrome (Raid lobby).\nBastion of the Penitent (Wing 4).\nHall of Chains (Wing 5).\nThe Key of Ahdashim (Wing 7).\nMount Balrior (Wing 8).\nMythwright Gambit (Wing 6).\nSalvation Pass (Wing 2).\nSpirit Vale (Wing 1).\nStronghold of the Faithful (Wing 3).\nSpecial Forces Training Area (Golem).\nStrike Mission: Aetherblade Hideout (Mai Trin).\nStrike Mission: Boneskinner.\nStrike Mission: Cold War (Minister of Morale).\nStrike Mission: Cosmic Observatory (Dagda).\nForging Steel (Ancient Forgeman).\nStrike Mission: Fraenir of Jormag.\nStrike Mission: Harvest Temple (The Dragonvoid).\nStrike Mission: Kaineng Overlook (Minister Li).\nStrike Mission: Old Lion’s Court.\nSecret Lair of the Snowmen (Public).\nStrike Mission: Shiverpeaks Pass (Icebrood Construct).\nStrike Mission: Temple of Febe (Cerus).\nStrike Mission: Voice of the Fallen and Claw of the Fallen.\nStrike Mission: Whisper of Jormag.\nStrike Mission: Xunlai Jade Junkyard (Ankka).\nEnd of Dragons Strike Missions.\nIcebrood Saga Strike Missions.\nLiving World Season 1 (rework) Strike Missions.\nSecrets of the Obscure Strike Missions.\nWintersday Strike Missions.\nStrike Mission: Aetherblade Hideout (Mai Trin).\nStrike Mission: Harvest Temple (The Dragonvoid).\nStrike Mission: Kaineng Overlook (Minister Li).\nStrike Mission: Xunlai Jade Junkyard (Ankka).\nStrike Mission: Boneskinner.\nStrike Mission: Cold War (Minister of Morale).\nForging Steel (Ancient Forgeman).\nStrike Mission: Fraenir of Jormag.\nStrike Mission: Shiverpeaks Pass (Icebrood Construct).\nStrike Mission: Voice of the Fallen and Claw of the Fallen.\nStrike Mission: Whisper of Jormag.\nStrike Mission: Old Lion’s Court.\nStrike Mission: Cosmic Observatory (Dagda).\nStrike Mission: Temple of Febe (Cerus).\nSecret Lair of the Snowmen (Public).\nAlpine Borderlands (Blue).\nAlpine Borderlands (Green).\nDesert Borderlands (Red).\nEdge of the Mists.\nEternal Battlegrounds.\nObsidian Sanctum.\nPvP 15v15.\nMini maps like Mistlock Sanctuary, Aerodrome, etc.\nArmistice Bastion.\nFortune’s Vale.\nNexus addon loaded event.\nNexus addon unloaded event.\nAn event identifier &amp; payload type pair.\nMumble identity updated event.\nMumble identity.\nNexus volatile addon disabled event.\nWindow resized event.\nArcDPS EVTC bridge events.\nMacro to wrap an event callback.\nMacro to wrap an event callback.\nRaises an event to all subscribing addons.\nRaises an event without payload to all subscribing addons.\nRaises an event without payload for a specific subscribing …\nRaises an event for a specific subscribing addon.\nMacro to subscribe to an event with a wrapped callback.\nMacro to subscribe to an event with a wrapped callback.\nSubscribes to an event with a raw callback using a typed …\nSubscribes to an event with a raw callback using an …\nUnsubscribes a previously registered raw event callback.\nUnofficial Extras bridge events.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new event identifier &amp; payload type pair.\nRaises the event.\nSubscribes to the event.\nArcDPS player account name.\nArcDPS agent update.\nArcDPS EVTC combat local event.\nArcDPS EVTC combat squad event.\nArcDPS EVTC combat event data.\nReplays the last <code>SELF_JOIN</code> event.\nReplays <code>SQUAD_JOIN</code> events for the current squad.\nReplays the <code>TARGET_CHANGED</code> event for the current target.\nArcDPS self join event.\nArcDPS self leave event.\nArcDPS squad join event.\nArcDPS squad leave event.\nArcDPS target changed event.\nReturns the account name (if present).\nReturns the character name.\nReturns the destination <code>Agent</code>.\nReturns a pointer to the destination <code>Agent</code>.\nAgent elite specialization.\nReturns the <code>Event</code>.\nReturns a pointer to the <code>Event</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nArcDPS id of the agent.\nInstance id of the agent.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the agent has been added or removed.\nWhether the agent is self.\nWhether the agent is the new target.\nAgent profession.\nReturns the <code>Event</code>.\nReturns a pointer to the source <code>Agent</code>.\nAgent subgroup.\nAgent team.\nUnofficial Extras chat message event.\nUnofficial Extras squad update event.\nUnofficial Extras keybind changed event.\nUnofficial Extras language changed event.\nUnofficial Extras squad update payload.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds a font from a file path and sends updates to the …\nAdds a font from memory and sends updates to the callback.\nAdds a font from a resource and sends updates to the …\nMacro to wrap a font receive callback.\nMacro to wrap a font receive callback.\nRegisters a new callback to receive the font with the …\nReleases a previously registered callback for the font …\nResizes an existing font, sending the update to registered …\nGame keybinds.\nAn iterator over the variants of GameBind\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPresses the given <code>GameBind</code> asynchronously and release …\nChecks if the given <code>GameBind</code> is bound.\nPresses the given <code>GameBind</code>.\nPresses the given <code>GameBind</code> asynchronously.\nReleases the given <code>GameBind</code>.\nReleases the given <code>GameBind</code> asynchronously.\nImGui version.\nDuring ImGui frame, appended to options window.\nAfter ImGui frame was ended.\nBefore ImGui frame is initialized.\nDuring ImGui frame.\nType of render callback.\nAn iterator over the variants of RenderType\nDeregisters a window name to listen to on escape.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegisters a window name to get its bool toggled when …\nRegisters a new ImGui render callback of the given …\nMacro to wrap an ImGui render callback.\nMacro to wrap an ImGui render callback.\nUnregisters a previously registered ImGui render callback.\nThe hook for the specified target function is already …\nMinHook is already initialized.\nThe hook for the specified target function is not enabled …\nThe hook for the specified target function is already …\nThe specified function is not found.\nFailed to allocate memory.\nFailed to change the memory protection.\nThe specified module is not loaded.\nThe hook for the specified target function is not created …\nThe specified pointer is invalid. It points the address of …\nMinHook is not initialized yet, or already uninitialized.\nThe specified target function cannot be hooked.\nMinHook error codes.\nAn iterator over the variants of HookStatus\nSuccessful.\nUnknown error. Should not be returned.\nCreates a hook for the specified target function in …\nCreates a hook for the specified target function, and …\nCreates a hook for the specified target function in …\nDisables an already created hook.\nDsiables an already created hook.\nEnables an already created hook.\nEnables an already created hook.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the status is <code>HookStatus::Ok</code>.\nConverts the status to a <code>Result</code>.\nConverts the status to a <code>Result</code> with a value.\nRemoves an already created hook.\nRemoves an already created hook.\nA keybind.\nAlt modifier.\nControl modifier.\nReturns the argument unchanged.\nChecks whether the keybind has modifiers.\nCalls <code>U::from(self)</code>.\nTriggers a previously registered keybind programmatically.\nThe key.\nMacro to wrap a keybind handler callback.\nMacro to wrap a keybind handler callback.\nRegisters a new keybind using a keybind string like …\nRegisters a new keybind using a <code>Keybind</code> struct.\nShift modifier.\nUnregisters a previously registered keybind.\nCreates a new keybind without modifiers.\nAttempts to set a translated string for the given …\nAttempts to translate the identifier into the current …\nAttempts to translate the identifier into the given …\nAn iterator over the variants of LogLevel\nPrevious log function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogs a message to the given channel.\nReturns the directory for an addon with the passed name.\nReturns the common addon directory.\nReturns the game directory.\nAdds a new shortcut icon to the quick access with the …\nAdds a new <code>RawGuiRender</code> callback for the shortcut context …\nAdds a new shortcut icon to the quick access with the …\nAdds a new <code>RawGuiRender</code> callback fired when the quick …\nSends a notification to the given quick access shortcut.\nRemoves a previously registered shortcut from the quick …\nRemoves a previously registered shortcut context menu …\nRemoves a previously registered shortcut from the quick …\nRemoves a previously registered simple shortcut callback.\nA loaded texture.\nReturns the argument unchanged.\nAttempts to retrieve a texture by its identifier.\nAttempts to retrieve a texture or creates it from the …\nAttempts to retrieve a texture or creates it from the …\nAttempts to retrieve a texture or creates it from the …\nAttempts to retrieve a texture or creates it from the …\nHeight of the texture.\nReturns the associated <code>imgui::TextureId</code>.\nCalls <code>U::from(self)</code>.\nLoads a texture from the given file path.\nLoads a texture from the given memory. /// You can create …\nLoads a texture from the given resource.\nLoads a texture from the given URL.\nShader resource view of the texture.\nReturns the associated resource as raw pointer.\nReturns the original texture size in <code>imgui</code> format.\nReturns a resized texture size in <code>imgui</code> format.\nMacro to wrap a texture receive callback.\nMacro to wrap a texture receive callback.\nWidth of the texture.\nRequests an update to be downloaded <strong>without</strong> performing a …\nNexus addon API (version 2).\nNexus Addon API version.\nAdds a new shortcut icon to the quick access with the …\nAdds a new ImGui callback fired when right-clicking the …\nRemoves a registered render callback.\nRemoves a registered WNDPROC callback.\nRaises an event to all subscribing addons.\nRaises an event without a payload.\nRegisters a new event callback.\nRemoves a registered event callback.\nReturns the argument unchanged.\nReturns a path to <code>&quot;\\addons\\{name}&quot;</code>.\nReturns the path to the common addon folder.\nRetrieves the DirectX 11 device associated with the swap …\nReturns the path to the game directory.\nReturns a pointer to the requested resource of <code>null</code> if it …\nReturns a pointer to the <code>Texture</code> or <code>null</code> if it does not …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nMinHook create.\nMinHook disable.\nMinHook enable.\nMinHook remove.\nImGui context.\nImGui free function.\nImGui malloc function.\nCalls <code>U::from(self)</code>.\nRemoves a registered keybind.\nRegisters a new keybind handler for a given named keybind.\nRegisters a new keybind handler for a given named keybind.\nCreates a texture from the file and passes it to the …\nCreates a texture from the memory and passes it to the …\nCreates a texture from the resource and passes it to the …\nCreates a texture from the URL and passes it to the …\nLogs a message to the log window and log file.\nSends a notification icon to the given shortcut.\nRegisters a new render callback.\nRegisters a new WNDPROC callback.\nRemoves a shortcut with the given identifier from quick …\nRemoves a registered simple shortcut callback.\nSends a WNDPROC directly to the game, bypassing other …\nAllocates a shared resource of the given size and returns …\nDirectX swap chain.\nTranslates the identifier into the current active language.\nTranslates the identifier into the given language. Returns …\nNexus addon API (version 3).\nNexus Addon API version.\nAdds a new shortcut icon to the quick access with the …\nAdds a new ImGui callback fired when right-clicking the …\nSends a text alert to the user visible for a short amount …\nRemoves a registered render callback.\nRemoves a registered WNDPROC callback.\nRaises an event to all subscribing addons.\nRaises an event without payload to all subscribing addons.\nRaises an event without payload for a specific subscribing …\nRaises an event for a specific subscribing addon.\nRegisters a new event callback.\nRemoves a registered event callback.\nReturns the argument unchanged.\nReturns a path to <code>&quot;\\addons\\{name}&quot;</code>.\nReturns the path to the common addon folder.\nRetrieves the DirectX 11 device associated with the swap …\nReturns the path to the game directory.\nReturns a pointer to the requested resource of <code>null</code> if it …\nReturns a pointer to the <code>Texture</code> or <code>null</code> if it does not …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nMinHook create.\nMinHook disable.\nMinHook enable.\nMinHook remove.\nImGui context.\nImGui free function.\nImGui malloc function.\nCalls <code>U::from(self)</code>.\nRemoves a registered keybind.\nRegisters a new keybind handler for a given named keybind.\nRegisters a new keybind handler for a given named keybind.\nCreates a texture from the file and passes it to the …\nCreates a texture from the memory and passes it to the …\nCreates a texture from the resource and passes it to the …\nCreates a texture from the URL and passes it to the …\nLogs a message to the log window and log file.\nSends a notification icon to the given shortcut.\nRegisters a new render callback.\nRegisters a new WNDPROC callback.\nRemoves a shortcut with the given identifier from quick …\nRemoves a registered simple shortcut callback.\nSends a WNDPROC directly to the game, bypassing other …\nAllocates a shared resource of the given size and returns …\nDirectX swap chain.\nTranslates the identifier into the current active language.\nTranslates the identifier into the given language. Returns …\nNexus addon API (version 4).\nNexus Addon API version.\nAdds a font from disk and sends updates to the callback.\nAdds a font from memory and sends updates to the callback.\nAdds a font from an embedded resource and sends updates to …\nAdds a new shortcut icon to the quick access with the …\nAdds a new ImGui callback fired when right-clicking the …\nSends a text alert to the user visible for a short amount …\nRemoves a registered render callback.\nRemoves a registered WNDPROC callback.\nRaises an event to all subscribing addons.\nRaises an event without payload to all subscribing addons.\nRaises an event without payload for a specific subscribing …\nRaises an event for a specific subscribing addon.\nRegisters a new event callback.\nRemoves a registered event callback.\nReturns the argument unchanged.\nReturns a path to <code>&quot;\\addons\\{name}&quot;</code>.\nReturns the path to the common addon folder.\nRetrieves the DirectX 11 device associated with the swap …\nRequests a font to be sent to the given callback/receiver.\nReturns the path to the game directory.\nReturns a pointer to the requested resource of <code>null</code> if it …\nReturns a pointer to the <code>Texture</code> or <code>null</code> if it does not …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nMinHook create.\nMinHook disable.\nMinHook enable.\nMinHook remove.\nImGui context.\nImGui free function.\nImGui malloc function.\nCalls <code>U::from(self)</code>.\nRemoves a registered keybind.\nRegisters a new keybind handler for a given named keybind.\nRegisters a new keybind handler for a given named keybind.\nCreates a texture from the file and passes it to the …\nCreates a texture from the memory and passes it to the …\nCreates a texture from the resource and passes it to the …\nCreates a texture from the URL and passes it to the …\nLogs a message to the log window and log file.\nSends a notification icon to the given shortcut.\nRegisters a new render callback.\nRegisters a new WNDPROC callback.\nReleases a callback/receiver from a specific font.\nRemoves a shortcut with the given identifier from quick …\nRemoves a registered simple shortcut callback.\nDownloads the addon available at remote without checking …\nSends a WNDPROC directly to the game, bypassing other …\nAllocates a shared resource of the given size and returns …\nDirectX swap chain.\nTranslates the identifier into the current active language.\nTranslates the identifier into the given language. Returns …\nNexus addon API (version 6).\nNexus Addon API version.\nAdds a new icon to the quick access with the given texture …\nAdds a new ImGui callback fired when right-clicking the …\nAdds a font from disk and sends updates to the callback.\nAdds a font from memory and sends updates to the callback.\nAdds a font from an embedded resource and sends updates to …\nMinHook create.\nData Link API.\nRemoves a registered render callback.\nRemoves a registered WNDPROC callback.\nRemoves a registered keybind.\nDeregisters a window name to listen to on escape.\nMinHook disable.\nMinHook enable.\nEvent API.\nFont API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGame keybinds API.\nReturns the Nexus <code>AddonApi</code> instance.\nReturns a pointer to the requested resource of <code>null</code> if it …\nReturns a pointer to the <code>Texture</code> or <code>null</code> if it does not …\nRequests a font to be sent to the given callback/receiver.\nReturns a path to <code>&quot;\\addons\\{name}&quot;</code>.\nReturns the path to the common addon folder.\nRetrieves the DirectX 11 device associated with the swap …\nReturns the path to the game directory.\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nReturns a pointer to the <code>Texture</code> or creates it from the …\nImGui context.\nImGui free function.\nImGui malloc function.\nInput keybinds API.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrigger a keybind programmatically.\nSends the keys of a given bind and then releases them …\nReturns if a given game bind is set.\nCreates a texture from the file and passes it to the …\nCreates a texture from the memory and passes it to the …\nCreates a texture from the resource and passes it to the …\nCreates a texture from the URL and passes it to the …\nLocalization API.\nLogs a message to the log window and log file.\nMinHook API.\nSends a notification icon to the given shortcut.\nPaths API.\nTPresses the keys of a given bind.\nPresses the keys of a given bind.\nQuick Access API.\nRaises an event to all subscribing addons.\nRaises an event without payload to all subscribing addons.\nRaises an event without payload for a specific subscribing …\nRaises an event for a specific subscribing addon.\nRegisters a new render callback.\nRegisters a new WNDPROC callback.\nRegisters a window name to get its bool toggled when …\nRegisters a new keybind handler for a given named keybind.\nRegisters a new keybind handler for a given named keybind.\nReleases the keypress of a given bind.\nReleases a callback/receiver from a specific font.\nReleases the keypress of a given bind.\nMinHook remove.\nRemoves a shortcut with the given identifier from quick …\nRemoves a registered context menu from the quick access …\nRendering API.\nDownloads the addon available at remote without checking …\nResizes a font and sends updates to the registered …\nSends a text alert to the user visible for a short amount …\nSends a WNDPROC directly to the game, bypassing other …\nSet a translated string at runtime.\nAllocates a shared resource of the given size and returns …\nRegisters a new event callback.\nDirectX swap chain.\nTexture Api.\nTranslates the identifier into the current active language.\nTranslates the identifier into the given language. Returns …\nUi API.\nRemoves a registered event callback.\nWNDPROC API.\nDeregisters an already registered WNDPROC callback.\nRegisters a new WNDPROC callback.\nSends a WNDPROC directly to the game, bypassing other …")