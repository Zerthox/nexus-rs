searchState.loadedDescShard("retour", 0, "A cross-platform detour library written in Rust.\nThe detour is already initialized.\nThe argument types as a tuple.\nContains the error value\nA representation of all possible errors.\nTrait representing a function that can be used as a target …\nA type-safe detour.\nTrait indicating that <code>Self</code> can be detoured by the given …\nThe address does not contain valid instructions.\nThe address has no available area for patching.\nThe address is not executable memory.\nThe detour is not initialized.\nContains the success value\nThe system is out of executable memory.\nThe return type.\nA raw detour.\nA memory operation failed.\nThe result of a detour operation.\nThe address for the target and detour are identical\nThe address contains an instruction that prevents …\nDisables the detour.\nDisables the detour.\nEnables the detour.\nEnables the detour.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>Function</code> from an untyped pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the detour is enabled or not.\nReturns whether the detour is enabled or not.\nCreate a new hook given a target function and a compatible …\nConstructs a new inline detour patcher.\nReturns an untyped pointer for this function.\nReturns a reference to the generated trampoline.")